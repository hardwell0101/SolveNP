name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      TESTING: 'True'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      - name: Run tests
        run: |
          cd backend
          pytest

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Create Firebase Admin SDK file
        run: |
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > backend/firebase-adminsdk.json
          cat backend/firebase-adminsdk.json  # Print the file content for debugging
      - name: Deploy to Production
        env:
          PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          HOST: ${{ secrets.LIGHTSAIL_HOST }}
          USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          echo "$PRIVATE_KEY" > lightsail-key
          chmod 600 lightsail-key
          scp -i lightsail-key -o StrictHostKeyChecking=no backend/firebase-adminsdk.json $USER@$HOST:/var/www/solvenp/backend/
          ssh -i lightsail-key -o StrictHostKeyChecking=no $USER@$HOST '
            set -e
            cd /var/www/solvenp
            echo "Fetching latest changes from main branch"
            git fetch origin main
            git reset --hard origin/main
            echo "Updating system and installing Python"
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            echo "Updating dependencies"
            cd backend
            python3 -m pip install -r requirements.txt
            cd ..
            echo "Cleaning up Docker system"
            sudo docker system prune -af --filter "label!=environment=production" || echo "Cleanup failed, continuing..."
            echo "Stopping production containers"
            sudo docker stop $(sudo docker ps -qf "name=*_production") || echo "No containers to stop"
            echo "Deploying production services"
            sudo docker-compose -f docker-compose.yml down --remove-orphans
            sudo docker-compose -f docker-compose.yml up -d --build
            echo "Checking container status"
            sudo docker ps
            echo "Production deployment completed successfully"
          ' || { echo "Deployment failed"; exit 1; }
          rm -f lightsail-key

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Create Firebase Admin SDK file
        run: |
          echo '${{ secrets.FIREBASE_ADMIN_SDK_JSON }}' > backend/firebase-adminsdk.json
          cat backend/firebase-adminsdk.json  # Print the file content for debugging
      - name: Deploy to Staging
        env:
          PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          HOST: ${{ secrets.LIGHTSAIL_HOST }}
          USER: ${{ secrets.LIGHTSAIL_USER }}
        run: |
          echo "$PRIVATE_KEY" > lightsail-key
          chmod 600 lightsail-key
          scp -i lightsail-key -o StrictHostKeyChecking=no backend/firebase-adminsdk.json $USER@$HOST:/var/www/solvenp/backend/
          ssh -i lightsail-key -o StrictHostKeyChecking=no $USER@$HOST '
            set -e
            cd /var/www/solvenp
            echo "Fetching latest changes from staging branch"
            git fetch origin staging
            git reset --hard origin/staging
            echo "Updating system and installing Python"
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            echo "Updating dependencies"
            cd backend
            python3 -m pip install -r requirements.txt
            cd ..
            echo "Cleaning up Docker system"
            sudo docker system prune -af --filter "label!=environment=staging" || echo "Cleanup failed, continuing..."
            echo "Stopping staging containers"
            sudo docker stop $(sudo docker ps -qf "name=*_staging") || echo "No containers to stop"
            echo "Deploying staging services"
            sudo docker-compose -f docker-compose.staging.yml down --remove-orphans
            sudo docker-compose -f docker-compose.staging.yml up -d --build
            echo "Checking container status"
            sudo docker ps
            echo "Staging deployment completed successfully"
          ' || { echo "Deployment failed"; exit 1; }
          rm -f lightsail-key